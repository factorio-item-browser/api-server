openapi: 3.0.3
info:
  title: Factorio Item Browser - Data API
  description: >
    This API provides access to the mod data of the Factorio Item Browser, including item details, recipe details as
    well as any translation available from the mods.
  contact:
    name: BluePsyduck
    email: bluepsyduck@gmx.com
  version: 3.1.4

servers:
  - url: https://api.factorio-item-browser.com/
    description: Live API server

tags:
  - name: Generic
  - name: Items
  - name: Mods
  - name: Recipes
  - name: Search

paths:
  /{combination-id}/generic/details:
    post:
      summary: Provides generic data to the entities.
      description: >
        This request provides generic data to the entities specified in the request. This data includes the translated
        label and description of the entities, as well as the information whether they exist at all. Non-existing
        entities will be missing in the response.
        <br><br>
        The response will not contain additional data for recipes, machines etc. Use the respective endpoints instead
        to get all of the details.
      operationId: generic.details
      tags:
        - Generic
      parameters:
        - $ref: "#/components/parameters/combination-id"
        - $ref: "#/components/parameters/Accept-Language"
      requestBody:
        $ref: "#/components/requestBodies/genericEntities"
      responses:
        "200":
          $ref: "#/components/responses/genericDetails"
        "400":
          $ref: "#/components/responses/badRequest"
        "401":
          $ref: "#/components/responses/unauthorized"
      security:
        - apiKey: []

  /{combination-id}/generic/icon:
    post:
      summary: Provides icons to the entities.
      description: >
        This request provides the icons for the entities specified in the request.
        <br><br>
        The icons are provided in the PNG format and use a base64 encoding in the response. The size of the icons
        differs depending of the entity type: Mod icons are 144x144 pixel, and icons of items, recipes and machines are
        the default 64x64 pixel in size. Icons which use a different size ingame than what was mentioned before are
        resized to their respective size (e.g. older icons with 32x32 pixel in size are enlarged to 64x64 pixel). Icons
        which consist of several layers ingame are already baked together to a final image, the information of the
        layers is not available anymore.
        <br><br>
        Next to the actual icon content, the response also contains a list of entities which are using this exact icon.
        This list is exhaustive, i.e. there is no other entity using that particular icon if it is not listed for it.
        This means that the entity lists contain more entities than originally requested. If a requested entity does
        not exist in any of the lists in the response, it does either not exist or does not have an icon assigned to it.
        <br><br>
        Responses can get quite large with several KB per icon, depending on how many icons have been requested. It is
        advised to split the icons into several requests if a large number of them is requested. It is also advised to
        keep the icons in some form of a cache to avoid re-requesting the same icon over and over again.
      operationId: generic.icon
      tags:
        - Generic
      parameters:
        - $ref: "#/components/parameters/combination-id"
        - $ref: "#/components/parameters/Accept-Language"
      requestBody:
        $ref: "#/components/requestBodies/genericEntities"
      responses:
        "200":
          $ref: "#/components/responses/genericIcon"
        "400":
          $ref: "#/components/responses/badRequest"
        "401":
          $ref: "#/components/responses/unauthorized"
      security:
        - apiKey: []

  /{combination-id}/item/list:
    post:
      summary: Provides a list of all items.
      description: >
        This request provides a paginated list of all items available in the combination. The items are sorted by their
        internal name.
        <br><br>
        Please be aware that requesting a large number of items will lead to longer loading times, as information about
        their production recipes must be fetched alongside. If you are only interested in the available item types and
        names and not the recipes, set "numberOfRecipesPerResult" to 0: In that case, no information about the recipes
        will be present in the response, making the request execute a lot quicker. Note that in this case the keys
        "recipes" and "totalNumberOfRecipes" will be missing completely from the response.
      operationId: item.list
      tags:
        - Items
      parameters:
        - $ref: "#/components/parameters/combination-id"
        - $ref: "#/components/parameters/Accept-Language"
      requestBody:
        $ref: "#/components/requestBodies/itemList"
      responses:
        "200":
          $ref: "#/components/responses/itemList"
        "400":
          $ref: "#/components/responses/badRequest"
        "401":
          $ref: "#/components/responses/unauthorized"
      security:
        - apiKey: []

  /{combination-id}/item/ingredient:
    post:
      summary: Provides all recipes having a specific item as ingredient.
      description: >
        This request provides a paginated list of all recipes having the item specified in the request as one of its
        ingredients. Normal and expensive variants of the same recipe will be grouped together and will be returned as
        one entry of the list.
        <br><br>
        The recipes are primarily ordered by the number of ingredients they have, and secondarily by their internal
        name.
        <br><br>
        If the item specified in the request is not known, the status code 404 will be triggered.
      operationId: item.ingredient
      tags:
        - Items
      parameters:
        - $ref: "#/components/parameters/combination-id"
        - $ref: "#/components/parameters/Accept-Language"
      requestBody:
        $ref: "#/components/requestBodies/itemRecipes"
      responses:
        "200":
          $ref: "#/components/responses/itemIngredient"
        "400":
          $ref: "#/components/responses/badRequest"
        "401":
          $ref: "#/components/responses/unauthorized"
        "404":
          $ref: "#/components/responses/itemNotFound"
      security:
        - apiKey: []

  /{combination-id}/item/product:
    post:
      summary: Provides all recipes having a specific item as product.
      description: >
        This request provides a paginated list of all recipes having the item specified in the request as one of its
        products. Normal and expensive variants of the same recipe will be grouped together and will be returned as one
        entry of the list.
        <br><br>
        The recipes are primarily ordered by the number of products they have, and secondarily by their internal name.
        That way the recipe actually producing the item will be coming first, before recipes which use that item as a
        catalyst.
        <br><br>
        If the item specified in the request is not known, the status code 404 will be triggered.
      operationId: item.product
      tags:
        - Items
      parameters:
        - $ref: "#/components/parameters/combination-id"
        - $ref: "#/components/parameters/Accept-Language"
      requestBody:
        $ref: "#/components/requestBodies/itemRecipes"
      responses:
        "200":
          $ref: "#/components/responses/itemProduct"
        "400":
          $ref: "#/components/responses/badRequest"
        "401":
          $ref: "#/components/responses/unauthorized"
        "404":
          $ref: "#/components/responses/itemNotFound"
      security:
        - apiKey: []

  /{combination-id}/item/random:
    post:
      summary: Provides random items of the currently enabled mods.
      description: >
        This request provides a list of random items available in the combination.
        <br><br>
        Please be aware that requesting a large number of items will lead to longer loading times, as information about
        their production recipes must be fetched alongside. If you are only interested in the available item types and
        names and not the recipes, set "numberOfRecipesPerResult" to 0: In that case, no information about the recipes
        will be present in the response, making the request execute a lot quicker. Note that in this case the keys
        "recipes" and "totalNumberOfRecipes" will be missing completely from the response.
      operationId: item.random
      tags:
        - Items
      parameters:
        - $ref: "#/components/parameters/combination-id"
        - $ref: "#/components/parameters/Accept-Language"
      requestBody:
        $ref: "#/components/requestBodies/itemRandom"
      responses:
        "200":
          $ref: "#/components/responses/itemRandom"
        "400":
          $ref: "#/components/responses/badRequest"
        "401":
          $ref: "#/components/responses/unauthorized"
      security:
        - apiKey: []

  /{combination-id}/mod/list:
    post:
      summary: Provides a list of all mods.
      description: >
        This request provides a list of all mods used in the specified combination, together with some details like
        the ingame name and its description, as well as the version of the mod which has been used to extract the data
        from the Factorio game.
        <br><br>
        The data in the response is from the time when the export happened. There is no synchronisation with e.g. the
        Factorio Mod Portal, newer versions of the mod, including changes in the authors etc., will only be applied if
        a new export of the combination is executed.
      operationId: mod.list
      tags:
        - Mods
      parameters:
        - $ref: "#/components/parameters/combination-id"
        - $ref: "#/components/parameters/Accept-Language"
      responses:
        "200":
          $ref: "#/components/responses/modList"
        "400":
          $ref: "#/components/responses/badRequest"
        "401":
          $ref: "#/components/responses/unauthorized"
      security:
        - apiKey: []

  /{combination-id}/recipe/list:
    post:
      summary: Provides a list of all recipes.
      description: >
        This request provides a paginated list of all recipes available in the combination. Normal and expensive
        variants of the same recipe will be grouped together and will be returned as one entry of the list.
        <br><br>
        The recipes are sorted by their internal name.
      operationId: recipe.list
      tags:
        - Recipes
      parameters:
        - $ref: "#/components/parameters/combination-id"
        - $ref: "#/components/parameters/Accept-Language"
      requestBody:
        $ref: "#/components/requestBodies/recipeList"
      responses:
        "200":
          $ref: "#/components/responses/recipeList"
        "400":
          $ref: "#/components/responses/badRequest"
        "401":
          $ref: "#/components/responses/unauthorized"
      security:
        - apiKey: []

  /{combination-id}/recipe/details:
    post:
      summary: Provides the details of specific recipes.
      description: >
        This request provides the details to the recipes specified in the request. The request must contain the
        internal names of the recipes to be returned. Normal and expensive variants of the same recipe will be grouped
        together and will be returned as one entry in the response.
        <br><br>
        If a requested recipe does not exist, it will be missing in the response. No error status will be triggered in
        that case.
      operationId: recipe.details
      tags:
        - Recipes
      parameters:
        - $ref: "#/components/parameters/combination-id"
        - $ref: "#/components/parameters/Accept-Language"
      requestBody:
        $ref: "#/components/requestBodies/recipeDetails"
      responses:
        "200":
          $ref: "#/components/responses/recipeDetails"
        "400":
          $ref: "#/components/responses/badRequest"
        "401":
          $ref: "#/components/responses/unauthorized"
      security:
        - apiKey: []

  /{combination-id}/recipe/machines:
    post:
      summary: Provides the list of machines able to craft a specific recipe.
      description: >
        This request will provide all machines, including their details, which are able to craft the recipe specified
        in the request, as a paginated list.
        <br><br>
        If a recipe can be crafted in-hand, a special machine with the name "character" is returned as first result of
        the list. All other machines are sorted by their internal name.
        <br><br>
        If the recipe specified in the request is not known, the status code 404 will be triggered.
      operationId: recipe.machines
      tags:
        - Recipes
      parameters:
        - $ref: "#/components/parameters/combination-id"
        - $ref: "#/components/parameters/Accept-Language"
      requestBody:
        $ref: "#/components/requestBodies/recipeMachines"
      responses:
        "200":
          $ref: "#/components/responses/recipeMachines"
        "400":
          $ref: "#/components/responses/badRequest"
        "401":
          $ref: "#/components/responses/unauthorized"
        "404":
          $ref: "#/components/responses/recipeNotFound"
      security:
        - apiKey: []

  /{combination-id}/search/query:
    post:
      summary: Searches for items and recipes using a query string.
      description: >
        The request searches for items and recipes matching the query string specified in the request body.
        <br><br>
        There is currently no special syntax for the search query. All keywords are specified case-insensitive as space
        separated list, and results must include all of the keywords to be returned for the query. Additional filter,
        like only returning recipes, are not available.
        <br><br>
        The search uses the following properties to find results:

          - Label and description of the language specified in the request header, e.g. "Elektronischer Schaltkreis" in
            case of "Accept-Language: de".
          - Label and description of the english translation as fallback for missing translations, e.g. "Electronic
            circuit".
          - Internal name of the entity, e.g. "electronic-circuit".

        The search is limited to 1000 results. If a query would return more results, they will get cut off.
        <br><br>
        The results of the search will be cached on the server, so subsequent requests for later pages of the search
        results will return quicker.
        <br><br>
        Please be aware that if "numberOfRecipesPerResult" is set to 0, no information about the recipes will be
        present in the response. Note that in this case the keys "recipes" and "totalNumberOfRecipes" will be missing
        completely from the response. This is the same behavior as in the responses of "item/list" and "item/random".
      operationId: search.query
      tags:
        - Search
      parameters:
        - $ref: "#/components/parameters/combination-id"
        - $ref: "#/components/parameters/Accept-Language"
      requestBody:
        $ref: "#/components/requestBodies/searchQuery"
      responses:
        "200":
          $ref: "#/components/responses/searchQuery"
        "400":
          $ref: "#/components/responses/badRequest"
        "401":
          $ref: "#/components/responses/unauthorized"
      security:
        - apiKey: []

components:
  parameters:
    Accept-Language:
      name: Accept-Language
      in: header
      description: The language code to use for translating labels and descriptions.
      schema:
        type: string
        default: en

    combination-id:
      name: combination-id
      in: path
      required: true
      description: The ID of the combination to use for the request.
      schema:
        type: string
      example: "2f4a45fa-a509-a9d1-aae6-ffcf984a7a76"

  requestBodies:
    genericEntities:
      content:
        application/json:
          schema:
            properties:
              entities:
                type: array
                items:
                  type: object
                  properties:
                    type:
                      type: string
                      description: The type of the entity.
                      enum:
                        - fluid
                        - item
                        - recipe
                    name:
                      type: string
                      description: The name of the entity.
                  required:
                    - type
                    - name
            required:
              - entities
            example:
              entities:
                - type: item
                  name: sulfur
                - type: fluid
                  name: sulfuric-acid
                - type: recipe
                  name: fill-sulfuric-acid-barrel
      required: true

    itemList:
      content:
        application/json:
          schema:
            properties:
              numberOfResults:
                type: integer
                description: The number of results to return.
                example: 10
              indexOfFirstResult:
                type: integer
                description: The 0-based index of the first result to return.
                example: 0
              numberOfRecipesPerResult:
                type: integer
                description: The number of recipes to return for each result.
                example: 3
      required: true

    itemRandom:
      content:
        application/json:
          schema:
            properties:
              numberOfResults:
                type: integer
                description: The number of results to return.
                example: 10
              numberOfRecipesPerResult:
                type: integer
                description: The number of recipes to return for each result.
                example: 3

    itemRecipes:
      content:
        application/json:
          schema:
            properties:
              type:
                type: string
                description: The type of the item.
                example: item
              name:
                type: string
                description: The name of the item.
                example: electronic-circuit
              numberOfResults:
                type: integer
                description: The number of results to return.
                example: 10
              indexOfFirstResult:
                type: integer
                description: The 0-based index of the first result to return.
                example: 0
            required:
              - type
              - name
      required: true

    recipeDetails:
      content:
        application/json:
          schema:
            properties:
              names:
                type: array
                description: The internal names of the recipe to return the details of.
                items:
                  type: string
                example:
                  - electronic-circuit
                  - advanced-circuit
            required:
              - names
      required: true

    recipeList:
      content:
        application/json:
          schema:
            properties:
              numberOfResults:
                type: integer
                description: The number of results to return.
                example: 10
              indexOfFirstResult:
                type: integer
                description: The 0-based index of the first result to return.
                example: 0
      required: true

    recipeMachines:
      content:
        application/json:
          schema:
            properties:
              name:
                type: string
                description: The internal name of the recipe to return the machines of.
                example: uranium-processing
              numberOfResults:
                type: integer
                description: The number of results to return.
                example: 10
              indexOfFirstResult:
                type: integer
                description: The 0-based index of the first result to return.
                example: 0
            required:
              - name
      required: true

    searchQuery:
      content:
        application/json:
          schema:
            properties:
              query:
                type: string
                description: The query to search for.
                example: oil
              numberOfResults:
                type: integer
                description: The number of results to return.
                example: 10
              indexOfFirstResult:
                type: integer
                description: The 0-based index of the first result to return.
                example: 0
              numberOfRecipesPerResult:
                type: integer
                description: The number of recipes to return for each result.
                example: 3
            required:
              - query
      required: true

  responses:
    # 200 responses
    genericDetails:
      description: The generic details of entities.
      content:
        application/json:
          schema:
            properties:
              entities:
                type: array
                items:
                  $ref: "#/components/schemas/GenericEntity"
            example:
              entities:
                - type: item
                  name: sulfur
                  label: Sulfur
                  description: ""
                - type: fluid
                  name: sulfuric-acid
                  label: Sulfuric acid
                  description: ""
                - type: recipe
                  name: fill-sulfuric-acid-barrel
                  label: Fill Sulfuric acid barrel
                  description: ""

    genericIcon:
      description: The icons of the entities.
      content:
        application/json:
          schema:
            properties:
              icons:
                type: array
                items:
                  $ref: "#/components/schemas/Icon"

    itemIngredient:
      description: The recipes using the item as ingredient.
      content:
        application/json:
          schema:
            properties:
              item:
                $ref: "#/components/schemas/GenericEntityWithRecipes"

    itemList:
      description: The list of all items.
      content:
        application/json:
          schema:
            properties:
              items:
                type: array
                description: The items.
                items:
                  $ref: "#/components/schemas/GenericEntityWithRecipes"
                example:
                  - type: item
                    name: electronic-circuit
                    label: Elektronischer Schaltkreis
                    description: ""
                    recipes: []
                  - type: fluid
                    name: crude-oil
                    label: Rohöl
                    description: ""
                    recipes: []
              totalNumberOfResults:
                type: integer
                description: The total number of available results.
                example: 42

    itemProduct:
      description: The recipes having the item as product.
      content:
        application/json:
          schema:
            properties:
              item:
                $ref: "#/components/schemas/GenericEntityWithRecipes"

    itemRandom:
      description: The random items.
      content:
        application/json:
          schema:
            properties:
              items:
                type: array
                items:
                  $ref: "#/components/schemas/GenericEntityWithRecipes"

    modList:
      description: The list of mods.
      content:
        application/json:
          schema:
            properties:
              mods:
                type: array
                items:
                  $ref: "#/components/schemas/Mod"

    recipeDetails:
      description: The details of the requested recipe.
      content:
        application/json:
          schema:
            properties:
              recipes:
                type: array
                items:
                  $ref: "#/components/schemas/RecipeWithExpensiveVersion"

    recipeList:
      description: The list of all recipes.
      content:
        application/json:
          schema:
            properties:
              recipes:
                type: array
                description: The recipes.
                items:
                  $ref: "#/components/schemas/RecipeWithExpensiveVersion"
              totalNumberOfResults:
                type: integer
                description: The total number of available results.
                example: 42

    recipeMachines:
      description: The machines able to craft the recipe.
      content:
        application/json:
          schema:
            properties:
              machines:
                type: array
                items:
                  $ref: "#/components/schemas/Machine"
              totalNumberOfResults:
                type: integer
                description: The total number of available results.
                example: 1

    searchQuery:
      description: The found items, recipes etc.
      content:
        application/json:
          schema:
            properties:
              results:
                type: array
                description: The results returned by the search.
                items:
                  $ref: "#/components/schemas/GenericEntityWithRecipes"
              totalNumberOfResults:
                type: integer
                description: The total number of results of the search.
                example: 1

    # 400 responses
    badRequest:
      description:
        The request was not valid. Please make sure the "Content-Type" is set to "application/json", the request body
        is a valid JSON string, and all required parameters are present.
      content:
        application/json:
          schema:
            type: object
            properties:
              error:
                type: object
                properties:
                  message:
                    type: string
                    example: Request validation failed.

    # 401 responses
    unauthorized:
      description: Api-Key is missing in the header or was invalid.
      content:
        application/json:
          schema:
            type: object
            properties:
              error:
                type: object
                properties:
                  message:
                    type: string
                    example: Invalid or missing Api-Key.

    # 404 responses
    itemNotFound:
      description: The requested item is not known in the combination of mods.
      content:
        application/json:
          schema:
            type: object
            properties:
              error:
                type: object
                properties:
                  message:
                    type: string
                    example: Item not found in the combination of mods.

    recipeNotFound:
      description: The requested recipe is not known in the combiantion of mods.
      content:
        application/json:
          schema:
            type: object
            properties:
              error:
                type: object
                properties:
                  message:
                    type: string
                    example: Recipe not found in the combination of mods.

  schemas:
    GenericEntity:
      type: object
      description: A generic entity with basic information.
      properties:
        type:
          type: string
          description: The type of the entity
          enum:
            - fluid
            - item
            - recipe
          example: item
        name:
          type: string
          description: The internal name of the entity.
          example: electronic-circuit
        label:
          type: string
          description: The translated label of the entity.
          example: Elektronischer Schaltkreis
        description:
          type: string
          description: The translated description of the entity.
          example: ""

    GenericEntityWithRecipes:
      description: A generic entity with basic information, including recipes.
      allOf:
        - $ref: "#/components/schemas/GenericEntity"
        - type: object
          properties:
            recipes:
              type: array
              description: The recipes related to the entity.
              items:
                $ref: "#/components/schemas/RecipeWithExpensiveVersion"
            totalNumberOfRecipes:
              type: integer
              description: The total number of recipes available for the entity.
              example: 7

    Icon:
      type: object
      description: An icon of an item or recipe.
      properties:
        entities:
          type: array
          description: The entities using the icon file with the current enabled mods.
          items:
            type: object
            properties:
              type:
                type: string
                description: The type of the entity using this icon.
              name:
                type: string
                description: The name of the entity using this icon.
            example:
              - type: item
                name: iron-plate
              - type: item
                name: bob-iron-plate
              - type: recipe
                name: irom-plate
        content:
          type: string
          description: The base64 encoded contents of the icon file.
          example: <base64 encoded string>
        size:
          type: integer
          description: The size of the icon in pixels.
          example: 64

    Item:
      type: object
      description: An actual item or fluid.
      properties:
        type:
          type: string
          description: The type of the item.
          enum:
            - fluid
            - item
        name:
          type: string
          description: The name of the item.
        label:
          type: string
          description: The translated label of the item.
        description:
          type: string
          description: The translated description of the item, if available.
        amount:
          type: number
          description: The amount of the item as ingredient or product.

    Machine:
      type: object
      description: A machine required to craft recipes.
      properties:
        name:
          type: string
          description: The name of the machine.
          example: centrifuge
        label:
          type: string
          description: The translated label of the machine.
          example: Zentrifuge
        description:
          type: string
          description: The translated description of the machine, if available.
          example: Verarbeitet verschiedene uranbasierte Baupläne.
        craftingSpeed:
          type: number
          description: The crafting speed of the machine.
          example: 1
        numberOfItemSlots:
          type: integer
          description: The number of ingredient slots available in the machine, or 255 if unlimited.
          example: 255
        numberOfFluidInputSlots:
          type: integer
          description: The number of fluid input slots available in the machine.
          example: 0
        numberOfFluidOutputSlots:
          type: integer
          description: The number of fluid output slots available in the machine.
          example: 0
        numberOfModuleSlots:
          type: integer
          description: The number of module slots available in the machine.
          example: 2
        energyUsage:
          type: number
          description: The energy usage of the machine.
          example: 350
        energyUsageUnit:
          type: string
          description: The unit of the energy usage.
          enum:
            - W
            - kW
            - MW
            - GW
            - TW
            - PW
            - EW
            - ZW
            - YW
          example: kW

    Mod:
      type: object
      description: A mod supported by the API.
      properties:
        name:
          type: string
          description: The internal name of the mod.
          example: base
        label:
          type: string
          description: The translated label of the mod.
          example: Basis-Mod
        description:
          type: string
          description: The translated description of the mod.
          example: Grundlegende Mod mit allen Standard-Spieldaten und den Standard-Kampagnen.
        author:
          type: string
          description: The author of the mod.
          example: Factorio team
        version:
          type: string
          description: The version of the mod.
          example: 1.2.3

    Recipe:
      type: object
      description: A recipe to craft items into other ones.
      properties:
        name:
          type: string
          description: The name of the recipe.
          example: electronic-circuit
        mode:
          type: string
          description: The mode of the recipe.
          enum:
            - normal
            - expensive
          example: normal
        label:
          type: string
          description: The translated label of the recipe.
          example: Elektronischer Schaltkreis
        description:
          type: string
          description: The translated description of the recipe, if available.
          example: Lorem ipsum dolor sit amet.
        ingredients:
          type: array
          description: The ingredients of the recipe.
          items:
            $ref: "#/components/schemas/Item"
          example:
            - type: item
              name: iron-plate
              label: Eisenplatte
              description: ""
              amount: 1
            - type: item
              name: copper-cable
              label: Kupferkabel
              description: ""
              amount: 3
        products:
          type: array
          description: The products of the recipe.
          items:
            $ref: "#/components/schemas/Item"
          example:
            - type: item
              name: electronic-circuit
              label: Elektronischer Schaltkreis
              description: ""
              amount: 1
        craftingTime:
          type: number
          description: The crafting time of the recipe.
          example: 0.5

    RecipeWithExpensiveVersion:
      description: A recipe to craft items into other ones, including an expensive version of it, if existing.
      allOf:
        - $ref: "#/components/schemas/Recipe"
        - type: object
          properties:
            expensiveVersion:
              $ref: "#/components/schemas/Recipe"
          example:
            name: electronic-circuit
            label: Elektronischer Schaltkreis
            description: ""
            ingredients:
              - type: item
                name: iron-plate
                label: Eisenplatte
                description: ""
                amount: 1
              - type: item
                name: copper-cable
                label: Kupferkabel
                description: ""
                amount: 3
            products:
              - type: item
                name: electronic-circuit
                label: Elektronischer Schaltkreis
                description: ""
                amount: 1
            craftingTime: 0.5
            expensiveVersion:
              name: electronic-circuit
              label: Elektronischer Schaltkreis
              description: ""
              ingredients:
                - type: item
                  name: iron-plate
                  label: Eisenplatte
                  description: ""
                  amount: 2
                - type: item
                  name: copper-cable
                  label: Kupferkabel
                  description: ""
                  amount: 8
              products:
                - type: item
                  name: electronic-circuit
                  label: Elektronischer Schaltkreis
                  description: ""
                  amount: 1
              craftingTime: 0.5

  securitySchemes:
    apiKey:
      type: apiKey
      in: header
      name: Api-Key
