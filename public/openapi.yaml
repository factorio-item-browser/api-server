openapi: "3.0.0"
info:
  title: "Factorio Item Browser API"
  description:
    This API provides access to the mod data of the Factorio Item Browser, including item details, recipe details as
    well as any translation available from the mods.
  contact:
    name: "BluePsyduck"
    email: "bluepsyduck@gmx.com"
  version: "1.0.1"
servers:
  - url: "https://www.factorio-item-browser.com/api"
    description: "Live API server"
tags:
  - name: "Authorization"
    description: "Requests to authorize against the API."
  - name: "Generic"
    description: "Requests providing generic data to entities."
  - name: "Items"
    description: "Requests providing data to a specific item."
  - name: "Mods"
    description: "Requests providing mod related data."
  - name: "Recipes"
    description: "Requests providing data to a specific recipe."
  - name: "Search"
    description: "Requests to search for items, recipes etc. using queries."

paths:
  /auth:
    post:
      summary:
        Authorizes the access to the API by specifying the used mods.
      description:
        This request is used to create an authorization token to be used in all other requests. Part of the
        authorization is an agent and an accessKey provided by the administrator, as well as the names of mods which
        should be enabled for the token. The token will normally last for 24 hours, but may invalidate at any point
        when the database changed and the mod names must be re-evaluated. Whenever you encounter a 401 error in the
        other requests, re-authorize to get a new token.<br />
        <br />
        To get a first look into the API, you may use the "demo" agent with the access key "factorio-item-browser".
        This agent is restricted to base mod only, though.
      operationId: "auth"
      tags:
        - Authorization
      requestBody:
        $ref: "#/components/requestBodies/auth"
      responses:
        "200":
          $ref: "#/components/responses/auth"
        "400":
          $ref: "#/components/responses/badRequest"
        "403":
          $ref: "#/components/responses/accessDenied"
        "500":
          $ref: "#/components/responses/unexpectedError"

  /generic/details:
    post:
      summary:
        Provides basic data to items and recipes.
      description:
        This request provides very basic information to items and recipes, like the translated labels and description.
        It will NOT provide any additional data like ingredients and products of recipes.
      operationId: "generic.details"
      tags:
        - Generic
      parameters:
        - $ref: "#/components/parameters/Authorization"
        - $ref: "#/components/parameters/Accept-Language"
      requestBody:
        $ref: "#/components/requestBodies/genericEntities"
      responses:
        "200":
          $ref: "#/components/responses/genericDetails"
        "400":
          $ref: "#/components/responses/badRequest"
        "401":
          $ref: "#/components/responses/unauthorized"
        "500":
          $ref: "#/components/responses/unexpectedError"
      security:
        - jwt: []

  /generic/icon:
    post:
      summary:
        Provides the icon file contents to specific items and recipes.
      description:
        This request will return the icon file in base64 encoding. The icons are always provided in PNG format. Make
        sure to cache the returned icons, and remember to clear the cache when the mods are changed.
        The response may contain types and names of entities not explicitely requested, but which have the same icon as
        one of the requested one.
      operationId: "generic.icon"
      tags:
        - Generic
      parameters:
        - $ref: "#/components/parameters/Authorization"
      requestBody:
        $ref: "#/components/requestBodies/genericEntities"
      responses:
        "200":
          $ref: "#/components/responses/genericIcon"
        "400":
          $ref: "#/components/responses/badRequest"
        "401":
          $ref: "#/components/responses/unauthorized"
        "500":
          $ref: "#/components/responses/unexpectedError"
      security:
        - jwt: []

  /item/ingredient:
    post:
      summary:
        Provides all recipes in which a specific item as an ingredient of.
      description:
        This request will return all recipes with a specific item as one of its ingredients. The recipes in the response
        will be grouped together by their name, so that normal and expensive versions will always be returned together,
        if both are available. The parameters "numberOfResults" and "indexOfFirstResult" are applied to these groups,
        not on the recipes itself.
      operationId: "item.ingredient"
      tags:
        - Items
      parameters:
        - $ref: "#/components/parameters/Authorization"
        - $ref: "#/components/parameters/Accept-Language"
      requestBody:
        $ref: "#/components/requestBodies/itemRecipes"
      responses:
        "200":
          $ref: "#/components/responses/itemIngredient"
        "400":
          $ref: "#/components/responses/badRequest"
        "401":
          $ref: "#/components/responses/unauthorized"
        "404":
          $ref: "#/components/responses/itemNotFound"
        "500":
          $ref: "#/components/responses/unexpectedError"
      security:
        - jwt: []

  /item/product:
    post:
      summary:
        Provides all recipes which produce a specific item.
      description:
        This request will return all recipes with a specific item as one of its products. The recipes in the response
        will be grouped together by their name, so that normal and expensive versions will always be returned together,
        if both are available. The parameters "numberOfResults" and "indexOfFirstResult" are applied to these groups,
        not on the recipes itself.
      operationId: "item.product"
      tags:
        - Items
      parameters:
        - $ref: "#/components/parameters/Authorization"
        - $ref: "#/components/parameters/Accept-Language"
      requestBody:
        $ref: "#/components/requestBodies/itemRecipes"
      responses:
        "200":
          $ref: "#/components/responses/itemProduct"
        "400":
          $ref: "#/components/responses/badRequest"
        "401":
          $ref: "#/components/responses/unauthorized"
        "404":
          $ref: "#/components/responses/itemNotFound"
        "500":
          $ref: "#/components/responses/unexpectedError"
      security:
        - jwt: []

  /item/random:
    post:
      summary:
        Provides random items of the currently enabled mods.
      operationId: "item.random"
      tags:
        - Items
      parameters:
        - $ref: "#/components/parameters/Authorization"
        - $ref: "#/components/parameters/Accept-Language"
      requestBody:
        $ref: "#/components/requestBodies/itemRandom"
      responses:
        "200":
          $ref: "#/components/responses/itemRandom"
        "400":
          $ref: "#/components/responses/badRequest"
        "401":
          $ref: "#/components/responses/unauthorized"
        "500":
          $ref: "#/components/responses/unexpectedError"
      security:
        - jwt: []

  /mod/list:
    post:
      summary:
        Lists the mods available in the browser.
      description:
        This request will list all mods known to the browser, including whether they are enabled for the current token
        or not.
      operationId: "mod.list"
      tags:
        - Mods
      parameters:
        - $ref: "#/components/parameters/Authorization"
        - $ref: "#/components/parameters/Accept-Language"
      responses:
        "200":
          $ref: "#/components/responses/modList"
        "400":
          $ref: "#/components/responses/badRequest"
        "401":
          $ref: "#/components/responses/unauthorized"
        "500":
          $ref: "#/components/responses/unexpectedError"
      security:
        - jwt: []

  /mod/meta:
    post:
      summary:
        Provides some meta information about the currently enabled mods.
      description:
        This request will provide some meta information of the mods like the number of available and enabled mods. This
        request is to avoid requesting the full list of mods to get these information.
      operationId: "mod.meta"
      tags:
        - Mods
      parameters:
        - $ref: "#/components/parameters/Authorization"
      responses:
        "200":
          $ref: "#/components/responses/modMeta"
        "400":
          $ref: "#/components/responses/badRequest"
        "401":
          $ref: "#/components/responses/unauthorized"
        "500":
          $ref: "#/components/responses/unexpectedError"
      security:
        - jwt: []

  /recipe/details:
    post:
      summary:
        Returns the details of specific recipes, including the ingredients and products.
      description:
        This request will return all details to specific recipes. If the recipe has a normal and an expensive version,
        then both are returned. The order of the returned recipes must be assumed to be random.
      operationId: "recipe.details"
      tags:
        - Recipes
      parameters:
        - $ref: "#/components/parameters/Authorization"
        - $ref: "#/components/parameters/Accept-Language"
      requestBody:
        $ref: "#/components/requestBodies/recipeDetails"
      responses:
        "200":
          $ref: "#/components/responses/recipeDetails"
        "400":
          $ref: "#/components/responses/badRequest"
        "401":
          $ref: "#/components/responses/unauthorized"
        "500":
          $ref: "#/components/responses/unexpectedError"
      security:
        - jwt: []

  /recipe/machines:
    post:
      summary:
        Returns the details of all machines able to craft the recipe.
      description:
        This request will return all machines with their details which are able to craft the recipe specified in the
        request. If the recipe supports being crafted by hand, a machine named "player" will appear in the list.
      operationId: "recipe.machines"
      tags:
        - Recipes
      parameters:
        - $ref: "#/components/parameters/Authorization"
        - $ref: "#/components/parameters/Accept-Language"
      requestBody:
        $ref: "#/components/requestBodies/recipeMachines"
      responses:
        "200":
          $ref: "#/components/responses/recipeMachines"
        "400":
          $ref: "#/components/responses/badRequest"
        "401":
          $ref: "#/components/responses/unauthorized"
        "500":
          $ref: "#/components/responses/unexpectedError"

  /search/query:
    post:
      summary:
        Searches for items, recipes etc. using a query string.
      operationId: "search.query"
      tags:
        - Search
      parameters:
        - $ref: "#/components/parameters/Authorization"
        - $ref: "#/components/parameters/Accept-Language"
      requestBody:
        $ref: "#/components/requestBodies/searchQuery"
      responses:
        "200":
          $ref: "#/components/responses/searchQuery"
        "400":
          $ref: "#/components/responses/badRequest"
        "401":
          $ref: "#/components/responses/unauthorized"
        "500":
          $ref: "#/components/responses/unexpectedError"
      security:
        - jwt: []

components:
  schemas:
    GenericEntity:
      type: "object"
      properties:
        type:
          type: "string"
          description: "The type of the entity"
          enum:
            - fluid
            - item
            - recipe
        name:
          type: "string"
          description: "The internal name of the entity."
        label:
          type: "string"
          description: "The translated label of the entity."
        description:
          type: "string"
          description: "The translated description of the entity."

    GenericEntityWithRecipes:
      type: "object"
      properties:
        type:
          type: "string"
          description: "The type of the entity"
          enum:
            - fluid
            - item
            - recipe
        name:
          type: "string"
          description: "The internal name of the entity."
        label:
          type: "string"
          description: "The translated label of the entity."
        description:
          type: "string"
          description: "The translated description of the entity."
        recipes:
          type: "array"
          description: "The recipes related to the entity."
          items:
            $ref: "#/components/schemas/Recipe"
        totalNumberOfRecipes:
          type: "integer"
          description: "The total number of recipes available for the entity."

    Icon:
      type: "object"
      properties:
        entities:
          type: "array"
          description: "The entities using the icon file with the current enabled mods."
          items:
            type: "object"
            properties:
              type:
                type: "string"
                description: "The type of the entity using this icon."
              name:
                type: "string"
                description: "The name of the entity using this icon."
        content:
          type: "string"
          description: "The base64 encoded contents of the icon file."

    Item:
      type: "object"
      properties:
        type:
          type: "string"
          description: "The type of the item."
          enum:
            - fluid
            - item
        name:
          type: "string"
          description: "The name of the item."
        label:
          type: "string"
          description: "The translated label of the item."
        description:
          type: "string"
          description: "The translated description of the item, if available."
        amount:
          type: "number"
          description: "The amount of the item as ingredient or product."

    Machine:
      type: "object"
      properties:
        name:
          type: "string"
          description: "The name of the machine."
        label:
          type: "string"
          description: "The translated label of the machine."
        description:
          type: "string"
          description: "The translated description of the machine, if available."
        craftingSpeed:
          type: "number"
          description: "The crafting speed of the machine."
        numberOfIngredientSlots:
          type: "integer"
          description: "The number of ingredient slots available in the machine."
        numberOfModuleSlots:
          type: "integer"
          description: "The number of module slots available in the machine."
        energyUsage:
          type: "integer"
          description: "The energy usage of the machine, in watt."

    Meta:
      type: "object"
      properties:
        statusCode:
          type: "integer"
          description: "The status code of the response, identical to the HTTP status code of the response header."
        executionTime:
          type: "number"
          description: "The execution time of the request, in seconds."
        errorMessage:
          type: "string"
          description: "The error message if the request failed."

    Mod:
      type: "object"
      properties:
        name:
          type: "string"
          description: "The internal name of the mod."
        label:
          type: "string"
          description: "The translated label of the mod."
        description:
          type: "string"
          description: "The translated description of the mod."
        author:
          type: "string"
          description: "The author of the mod."
        version:
          type: "string"
          description: "The version of the mod available in the browser."
        isEnabled:
          type: "boolean"
          description: "Whether the mod is currently enabled for the specified authorization token."

    Recipe:
      type: "object"
      properties:
        name:
          type: "string"
          description: "The name of the recipe."
        mode:
          type: "string"
          description: "The mode of the recipe."
          enum:
            - normal
            - expensive
        label:
          type: "string"
          description: "The translated label of the recipe."
        description:
          type: "string"
          description: "The translated description of the recipe, if available."
        ingredients:
          type: "array"
          description: "The ingredients of the recipe."
          items:
            $ref: "#/components/schemas/Item"
        products:
          type: "array"
          description: "The products of the recipe."
          items:
            $ref: "#/components/schemas/Item"
        craftingTime:
          type: "number"

  parameters:
    Authorization:
      name: "Authorization"
      in: "header"
      description:
        The token received from the auth request.
      schema:
        type: "string"
      example: "Bearer {TOKEN}"
      required: true

    Accept-Language:
      name: "Accept-Language"
      in: "header"
      description:
        The language code to use for translating labels and descriptions.
      schema:
        type: "string"
      example: "en"

  requestBodies:
    auth:
      content:
        application/json:
          schema:
            properties:
              agent:
                type: "string"
                description: "The agent to use for the API, provided by the admin."
              accessKey:
                type: "string"
                description: "The access key to the API, provided by the admin."
              enabledModNames:
                type: "array"
                description: "The internal names of the mods to enable."
                items:
                  type: "string"
            required:
              - agent
              - accessKey
              - enabledModNames
            example:
              agent: "demo"
              accessKey: "factorio-item-browser"
              enabledModNames:
                - base
      required: true

    genericEntities:
      content:
        application/json:
          schema:
            properties:
              entities:
                type: "array"
                items:
                  type: "object"
                  properties:
                    type:
                      type: "string"
                      description: "The type of the entity."
                      enum:
                        - fluid
                        - item
                        - recipe
                    name:
                      type: "string"
                      description: "The name of the entity."
                  required:
                    - type
                    - name
            required:
              - entities
            example:
              entities:
                - type: "item"
                  name: "sulfur"
                - type: "fluid"
                  name: "sulfuric-acid"
                - type: "recipe"
                  name: "fill-sulfuric-acid-barrel"
      required: true

    itemRandom:
      content:
        application/json:
          schema:
            properties:
              numberOfResults:
                type: "integer"
                description: "The number of results to return."
              numberOfRecipesPerResult:
                type: "integer"
                description: "The number of recipes to return for each result."
            example:
              numberOfResults: 10
              numberOfRecipesPerResult: 3

    itemRecipes:
      content:
        application/json:
          schema:
            properties:
              type:
                type: "string"
                description: "The type of the item."
              name:
                type: "string"
                description: "The name of the item."
              numberOfResults:
                type: "integer"
                description: "The number of results to return."
              indexOfFirstResult:
                type: "integer"
                description: "The 0-based index of the first result to return."
            required:
              - type
              - name
            example:
              type: "item"
              name: "electric-furnace"
              numberOfResults: 10
              indexOfFirstResult: 0
      required: true

    recipeDetails:
      content:
        application/json:
          schema:
            properties:
              names:
                type: "array"
                description: "The internal names of the recipe to return the details of."
                items:
                  type: "string"
            required:
              - names
            example:
              names:
                - "electronic-circuit"
                - "advanced-circuit"
      required: true

    recipeMachines:
      content:
        application/json:
          schema:
            properties:
              name:
                type: "string"
                description: "The internal name of the recipe to return the machines of."
              numberOfResults:
                type: "integer"
                description: "The number of results to return."
              indexOfFirstResult:
                type: "integer"
                description: "The 0-based index of the first result to return."
            required:
              - name
            example:
              name: "engine-unit"
              numberOfResults: 10
              indexOfFirstResult: 0
      required: true

    searchQuery:
      content:
        application/json:
          schema:
            properties:
              query:
                type: "string"
                description: "The query to search for."
              numberOfResults:
                type: "integer"
                description: "The number of results to return."
              indexOfFirstResult:
                type: "integer"
                description: "The 0-based index of the first result to return."
              numberOfRecipesPerResult:
                type: "integer"
                description: "The number of recipes to return for each result."
            required:
              - query
            example:
              query: "oil"
              numberOfResults: 10
              indexOfFirstResult: 0
              numberOfRecipesPerResult: 3
      required: true

  responses:
    # 200 responses
    auth:
      description:
        Authorization succeeded.
      content:
        application/json:
          schema:
            properties:
              authorization:
                type: "string"
                description: "The authorization token to use in the other requests."
              meta:
                $ref: "#/components/schemas/Meta"
            example:
              authorization: "SomeEncryptedValue"
              meta:
                statusCode: 200
                executionTime: 13.37
                errorMessage: ""

    genericDetails:
      description:
        The generic details of entities.
      content:
        application/json:
          schema:
            properties:
              entities:
                type: "array"
                items:
                  $ref: "#/components/schemas/GenericEntity"
              meta:
                $ref: "#/components/schemas/Meta"
            example:
              entities:
                - type: "item"
                  name: "sulfur"
                  label: "Sulfur"
                  description: ""
                - type: "fluid"
                  name: "sulfuric-acid"
                  label: "Sulfuric acid"
                  description: ""
                - type: "recipe"
                  name: "fill-sulfuric-acid-barrel"
                  label: "Fill Sulfuric acid barrel"
                  description: ""
              meta:
                statusCode: 200
                executionTime: 13.37
                errorMessage: ""

    genericIcon:
      description:
        The icons of the entities.
      content:
        application/json:
          schema:
            properties:
              icons:
                type: "array"
                items:
                  $ref: "#/components/schemas/Icon"
              meta:
                $ref: "#/components/schemas/Meta"
            example:
              icons:
                - entities:
                    - type: "item"
                      name: "iron-plate"
                    - type: "item"
                      name: "bob-iron-plate"
                    - type: "recipe"
                      name: "iron-plate"
                  content: "{base64 string}"
              meta:
                statusCode: 200
                executionTime: 13.37
                errorMessage: ""

    itemIngredient:
      description:
        The recipes using the item as ingredient.
      content:
        application/json:
          schema:
            properties:
              item:
                $ref: "#/components/schemas/Item"
              groupedRecipes:
                type: "array"
                description:
                  The recipes using the item as ingredient, grouped by name.
                items:
                  $ref: "#/components/schemas/GenericEntityWithRecipes"
              totalNumberOfResults:
                type: "integer"
                description:
                  The total number of available results.
              meta:
                $ref: "#/components/schemas/Meta"
            example:
              item:
                type: "item"
                name: "electric-furnace"
                label: "Electric furnace"
                description: ""
              groupedRecipes:
                - type: "recipe"
                  name: "electric-furnace"
                  label: "Electric furnace"
                  description: ""
                  recipes:
                    - name: "electric-furnace"
                      mode: "normal"
                      label: "Electric furnace"
                      description: ""
                      ingredients:
                        - type: "item"
                          name: "steel-plate"
                          label: "Steel plate"
                          description: ""
                          amount: 10
                        - type: "item"
                          name: "advanced-circuit"
                          label: "Advanced circuit"
                          description: ""
                          amount: 5
                        - type: "item"
                          name: "stone-brick"
                          label: "Stone brick"
                          description: ""
                          amount: 10
                      products:
                        - type: "item"
                          name: "electric-furnace"
                          label: "Electric furnace"
                          description: ""
                          amount: 1
                      craftingTime: 5
                  totalNumberOfRecipes: 2
              totalNumberOfResults: 1
              meta:
                statusCode: 200
                executionTime: 13.37
                errorMessage: ""

    itemProduct:
      description:
        The recipes having the item as product.
      content:
        application/json:
          schema:
            properties:
              item:
                $ref: "#/components/schemas/Item"
              groupedRecipes:
                type: "array"
                description:
                  The recipes having the item as product, grouped by name.
                items:
                  $ref: "#/components/schemas/GenericEntityWithRecipes"
              totalNumberOfResults:
                type: "integer"
                description:
                  The total number of available results.
              meta:
                $ref: "#/components/schemas/Meta"
            example:
              item:
                type: "item"
                name: "electric-furnace"
                label: "Electric furnace"
                description: ""
              groupedRecipes:
                - type: "recipe"
                  name: "production-science-pack"
                  label: "Production science pack"
                  description: "Used in labs for research."
                  recipes:
                    - name: "production-science-pack"
                      mode: "normal"
                      label: "Production science pack"
                      description: "Used in labs for research."
                      ingredients:
                        - type: "item"
                          name: "electric-engine-unit"
                          label: "Electric engine unit"
                          description: ""
                          amount: 1
                        - type: "item"
                          name: "electric-furnace"
                          label: "electric-furnace"
                          description: ""
                          amount: 1
                      products:
                        - type: "item"
                          name: "production-science-lab"
                          label: "Production science lab"
                          description: ""
                          amount: 2
                      craftingTime: 14
                  totalNumberOfRecipes: 2
              totalNumberOfResults: 1
              meta:
                statusCode: 200
                executionTime: 13.37
                errorMessage: ""

    itemRandom:
      description:
        The random items.
      content:
        application/json:
          schema:
            properties:
              items:
                type: "array"
                items:
                  $ref: "#/components/schemas/GenericEntityWithRecipes"
              meta:
                $ref: "#/components/schemas/Meta"
            example:
              items:
                - type: "item"
                  name: "iron-ore"
                  label: "Iron ore"
                  description: ""
                  recipes: []
                - type: "item"
                  name: "wooden-chest"
                  label: "Wooden chest"
                  description: ""
                  recipes:
                    - name: "wooden-chest"
                      mode: "normal"
                      label: "Wooden chest"
                      description: ""
                      ingredients:
                        - type: "item"
                          name: "wood"
                          label: "Wood"
                          description: ""
                          amount: 4
                      products:
                        - name: "wooden-chest"
                          mode: "normal"
                          label: "Wooden chest"
                          description: ""
                          amount: 1
                      craftingTime: 0.5
                  totalNumberOfRecipes: 1
              meta:
                statusCode: 200
                executionTime: 13.37
                errorMessage: ""

    modList:
      description:
        The list of available mods.
      content:
        application/json:
          schema:
            properties:
              mods:
                type: "array"
                items:
                  $ref: "#/components/schemas/Mod"
              meta:
                $ref: "#/components/schemas/Meta"
            example:
              mods:
                - name: "base"
                  label: "Base Mod"
                  description: "Basic mod with all the default game data and standard campaign."
                  author: "Factorio team"
                  version: "0.15.37"
                - name: "bobplates"
                  label: "Bob's Metals, Chemicals and Intermediates"
                  description: "Smelt extra ores into plates, and make useful intermediate products."
                  author: "Bobingabout"
                  version: "0.60.0"
              meta:
                statusCode: 200
                executionTime: 13.37
                errorMessage: ""

    modMeta:
      description:
        The meta information of the mods.
      content:
        application/json:
          schema:
            properties:
              numberOfAvailableMods:
                type: "integer"
                description: "The number of available mods in the browser."
              numberOfEnabledMods:
                type: "integer"
                description: "The number of currently enabled mods."
              meta:
                $ref: "#/components/schemas/Meta"
            example:
              numberOfAvailableMods: 42
              numberOfEnabledMods: 21
              meta:
                statusCode: 200
                executionTime: 13.37
                errorMessage: ""

    recipeDetails:
      description:
        The details of the requested recipe.
      content:
        application/json:
          schema:
            properties:
              recipes:
                type: "array"
                items:
                  $ref: "#/components/schemas/Recipe"
              meta:
                $ref: "#/components/schemas/Meta"
            example:
              recipes:
                - name: "electronic-circuit"
                  mode: "normal"
                  label: "Electronic circuit"
                  description: ""
                  ingredients:
                    - type: "item"
                      name: "iron-plate"
                      label: "Iron plate"
                      description: ""
                      amount: 1
                    - type: "item"
                      name: "copper-cable"
                      label: "Copper cable"
                      description: "Can be used to connect and disconnect electric poles and power switches with Left mouse button."
                      amount: 3
                  products:
                    - type: "item"
                      name: "electronic-circuit"
                      label: "Electronic circuit"
                      description: ""
                      amount: 1
                  craftingTime: 0.5
                - name: "electronic-circuit"
                  mode: "expensive"
                  label: "Electronic circuit"
                  description: ""
                  ingredients:
                    - type: "item"
                      name: "iron-plate"
                      label: "Iron plate"
                      description: ""
                      amount: 2
                    - type: "item"
                      name: "copper-cable"
                      label: "Copper cable"
                      description: "Can be used to connect and disconnect electric poles and power switches with Left mouse button."
                      amount: 10
                  products:
                    - type: "item"
                      name: "electronic-circuit"
                      label: "Electronic circuit"
                      description: ""
                      amount: 1
                  craftingTime: 0.5
              meta:
                statusCode: 200
                executionTime: 13.37
                errorMessage: ""

    recipeMachines:
      description:
        The machines able to craft the recipe.
      content:
        application/json:
          schema:
            properties:
              machines:
                type: "array"
                items:
                  $ref: "#/components/schemas/Machine"
              totalNumberOfResults:
                type: "integer"
                description:
                  The total number of available results.
              meta:
                $ref: "#/components/schemas/Meta"
            example:
              machines:
                - name: "assembling-machine-2"
                  label: "Assembling machine 2"
                  description: "Crafts items that require up to 4 ingredients."
                  craftingSpeed: 0.75
                  numberOfIngredientSlots: 4
                  numberOfModuleSlots: 2
                  energyUsage: 150000
                - name: "assembling-machine-3"
                  label: "Assembling machine 3"
                  description: "Crafts items that require up to 6 ingredients."
                  craftingSpeed: 1.25
                  numberOfIngredientSlots: 6
                  numberOfModuleSlots: 4
                  energyUsage: 210000
              totalNumberOfResults: 2
              meta:
                statusCode: 200
                executionTime: 13.37
                errorMessage: ""

    searchQuery:
      description:
        The found items, recipes etc.
      content:
        application/json:
          schema:
            properties:
              results:
                type: "array"
                description: "The results returned by the search."
                items:
                  $ref: "#/components/schemas/GenericEntityWithRecipes"
              totalNumberOfResults:
                type: "integer"
                description: "The total number of results of the search."
              meta:
                $ref: "#/components/schemas/Meta"
            example:
              results:
                - type: "recipe"
                  name: "advanced-oil-processing"
                  label: "Advanced oil processing"
                  description: ""
                  recipes:
                    - name: "advanced-oil-processing"
                      mode: "normal"
                      label: "Advanced oil processing"
                      description: ""
                      ingredients:
                        - type: "fluid"
                          name: "water"
                          label: "Water"
                          description: ""
                          amount: 50
                        - type: "fluid"
                          name: "crude-oil"
                          label: "Crude oil"
                          description: ""
                          amount: 100
                      products:
                        - type: "fluid"
                          name: "heavy-oil"
                          label: "Heavy oil"
                          description: ""
                          amount: 10
                        - type: "fluid"
                          name: "light-oil"
                          label: "Light oil"
                          description: ""
                          amount: 45
                        - type: "fluid"
                          name: "petroleum-gas"
                          label: "Petroleum gas"
                          description: ""
                          amount: 55
                      craftingTime: 5
                  totalNumberOfRecipes: 1
                - type: "fluid"
                  name: "crude-oil"
                  label: "Crude oil"
                  description: ""
                  recipes:
                    - name: "empty-crude-oil-barrel"
                      mode: "normal"
                      label: "Empty Crude oil barrel"
                      description: ""
                      ingredients:
                        - type: "item"
                          name: "crude-oil-barrel"
                          label: "Crude oil barrel"
                          description: ""
                          amount: 1
                      products:
                        - type: "item"
                          name: "empty-barrel"
                          label: "Empty barrel"
                          description: ""
                          amount: 1
                        - type: "fluid"
                          name: "crude-oil"
                          label: "Crude oil"
                          description: ""
                          amount: 50
                      craftingTime: 0.2
                  totalNumberOfRecipes: 1
              totalNumberOfResults: 17
              meta:
                statusCode: 200
                executionTime: 13.37
                errorMessage: ""

    # 400 responses
    badRequest:
      description:
        The request was not valid. Please make sure the "Content-Type" is set to "application/json", the request body
        is a valid JSON string, and all required parameters are present.
      content:
        application/json:
          schema:
            properties:
              meta:
                $ref: "#/components/schemas/Meta"
            example:
              meta:
                statusCode: 400
                executionTime: 13.37
                errorMessage: "Parameter X must not be empty."

    # 401 responses
    unauthorized:
      description:
        Authorization token is missing or was invalid. Use the /auth request to get a new token.
      content:
        application/json:
          schema:
            properties:
              meta:
                $ref: "#/components/schemas/Meta"
            example:
              meta:
                statusCode: 401
                executionTime: 13.37
                errorMessage: "Authorization token is missing or was invalid."

    # 403 responses
    accessDenied:
      description:
        Access denied. Please check your agent and accessKey values.
      content:
        application/json:
          schema:
            properties:
              meta:
                $ref: "#/components/schemas/Meta"
            example:
              meta:
                statusCode: 403
                executionTime: 13.37
                errorMessage: "Invalid agent or access key."

    # 404 responses
    itemNotFound:
      description:
        The requested item is not known to the browser, or not available in the enabled mods.
      content:
        application/json:
          schema:
            properties:
              meta:
                $ref: "#/components/schemas/Meta"
            example:
              meta:
                statusCode: 404
                executionTime: 13.37
                errorMessage: "Recipe not known: invalid-item"

    # 500 responses
    unexpectedError:
      description:
        An unexpected error occurred. Please try again later. If the problem persists, please contact the admin.
      content:
        application/json:
          schema:
            properties:
              meta:
                $ref: "#/components/schemas/Meta"
            example:
              meta:
                statusCode: 500
                executionTime: 13.37
                errorMessage: "An unexpected error occurred."

  securitySchemes:
    jwt:
      description: "JWT Token for the Factorio Item Browser API. Use the /auth request to receive a token."
      type: "http"
      scheme: "bearer"
      bearerFormat: "JWT"